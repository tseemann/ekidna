#!/usr/bin/env perl
use strict;
use warnings;
use Getopt::Std;
use File::Basename;
use Cwd qw(realpath);
use File::Spec;

#......................................................................................

our $VERSION = "0.2.2";
our $EXE = basename($0);
our $URL = "https://github.com/tseemann/ekidna";

#......................................................................................

my $minlen = 500;
my $cpus = 1;
my $asmcmd = "skesa --fastq {R1} --kmer 31 --cores {CPUS} --steps 1 --vector_percent 1 --contigs_out {CTGS}";
my $prefix = lc($EXE);
my $LOGFILE; # will be set later once <outdir> created

#......................................................................................

sub usage {
  my($errcode) = @_;
  $errcode ||= 0;
  my $ofh = $errcode ? \*STDERR : \*STDOUT;
  print $ofh 
    "NAME\n  $EXE $VERSION\n",
    "SYNOPSIS\n  Assembly based core SNP alignments\n",
    "USAGE\n  $EXE [options] -o <outdir> <SAMPLE1 SAMPLE2 SAMPLE3 ...>\n",
    "SAMPLES\n",
    "  Contigs    contigs.{fna,gff,gbk}[.gz] (assembled genomes)\n",
    "  Reads      R1.{fq,fastq}[.gz] (only want R1)\n",
    "OPTIONS\n",
    "  -h         Print this help\n",
    "  -v         Print version and exit\n",
    "  -q         No output while running, only errors\n",
    "  -k         Keep intermediate files\n",
    "  -o OUTDIR  Output folder [mandatory]\n",
    "  -p PREFIX  Prefix for output files [$prefix]\n",
    "  -j CPUS    Number of CPU threads to use [$cpus]\n",
    "  -m MINLEN  Minimum alignment size to consider [$minlen]\n",
    "  -a ASMCMD  Assember command [$asmcmd]\n",
    "HOME\n  $URL\n",
    "END\n";
  exit($errcode);
}

sub version {
  print "$EXE $VERSION\n";
  exit(0);
}

#......................................................................................

my %opt;
getopts('vhqkj:o:m:p:', \%opt) or exit(-1);
$opt{'v'} and version();
$opt{'h'} and usage(0);
$opt{'o'} or err("Please provide an output folder with -o");
my $dir = $opt{'o'};
@ARGV or err("Please provide two or more genomes");
$cpus = $opt{'j'} if $opt{'j'};
$minlen = $opt{'m'} if $opt{'m'};
$prefix = $opt{'p'} if $opt{'p'};

#......................................................................................

sub msg {
  my $msg = "[$EXE] @_\n";
  print STDERR $msg unless $opt{'q'};
  if ($LOGFILE) {
    open my $log, '>>', $LOGFILE;
    print $log $msg;
    close $log;
  }
}

sub err {
  print STDERR "ERROR: @_\n";
  exit(-1);
}

#......................................................................................

msg("This is $EXE $VERSION");
need_exe(qw(any2fasta seqtk minimap2 paftools.js skesa bcftools iqtree snp-sites sort grep));

run_cmd("mkdir -p ".$opt{o});
$LOGFILE = realpath("$dir/$prefix.log");
run_cmd("rm -f -v '$LOGFILE'") if -r $LOGFILE;

# loop over all positional command line arguments
my $N=0;
my %fa;
my $biggest_size=0;
my $ref_idx=0;

for my $fname (@ARGV) {
  my(undef, $path, $file) = File::Spec->splitpath($fname);
  msg("processing: $fname ($file)");
  -d $fname and err("'$fname' is a directory, not a file");
  -r $fname or err("'$fname' is not readable");
  $N++;
  my $fasta = "$dir/$N.fa";
  if ($file =~ m/f(ast)?q/) {
    denovo_assemble($fname, $fasta) unless -r $fasta;
  } 
  else {
    run_cmd("any2fasta -n -u '$fname' > '$fasta'");
  }
  my $size = -s $fasta;
  msg("[$N] wrote: $fasta, ~$size bp");
  if ($size > $biggest_size) {
    $ref_idx = $N;
    $biggest_size = $size;
  }
}
msg("Processed $N files.");

chdir($dir);
my $ref = "$ref_idx.fa";
msg("Will use reference: $ref ~$biggest_size bp");
run_cmd("cp -f -v '$ref' '$prefix.fna'");

my @vcf;
for my $i (1 .. $N) {
  next if $i == $ref_idx;
  run_cmd("minimap2 -t $opt{j} -c -x asm20 --cs $ref $i.fa > $i.paf");
  run_cmd("sort -k6,6 -k8,8n $i.paf | paftools.js call -l $minlen -L $minlen -s $i -f $ref - > $i.vcf");
  run_cmd("bcftools view --types snps,mnps $i.vcf | bcftools convert -f $ref -Oz -o $i.vcf.gz");
  run_cmd("bcftools index $i.vcf.gz");
  run_cmd("rm -f -v $i.vcf");
  push @vcf, "$i.vcf.gz";
  run_cmd("bcftools consensus -f $ref -s $i -o $i.cns $i.vcf.gz");
}

run_cmd("bcftools merge -0 -Ov -o $prefix.vcf @vcf");

my $full = "$prefix.full.aln";
msg("Building core alignment: $full");
unlink $full if -r $full;
for my $i (1 .. $N) {
  my $ext = $i == $ref_idx ? 'fa' : 'cns';
  msg("Appending $i.$ext ...");
  run_cmd("echo '>$i' >> $full");
  run_cmd("grep -v '>' $i.$ext >> $full");
}

my $aln = "$prefix.aln";
msg("Deriving core SNP alignment: $aln");
run_cmd("snp-sites -c -o $aln $full");

msg("Getting nucleotide frequency distribution");
my @freq = count_acgt($ref);

my $tree = "$prefix.nwk";
msg("Building dendrogram: $tree");
my $bootstrap = $N < 4 ? '' : '-bb 1000';
run_cmd("iqtree -fconst ".join(',',@freq).
       " -m GTR+G4 $bootstrap -nt AUTO -ntmax $cpus -st DNA -s '$aln' -pre iqtree -redo");
run_cmd("cp -f -v iqtree.treefile $prefix.nwk");

unless ($opt{k}) {
  msg("Removing temporary files; use -k to keep them");
  unlink $ref;
  unlink <iqtree.*>, <*.paf>, <*.fa>, <*.cns>, <*.csi>, <*.vcf.gz>
}

msg("Done.");
exit(0);

#......................................................................................

sub count_acgt {
  my($fasta) = @_;
  # chr, length, #A, #C, #G, #T, #2, #3, #4, #CpG, #tv, #ts, #CpG-ts
  my @freq=(0,0,0,0);
  for my $row (qx"seqtk comp $ref") {
    my @row = split ' ', $row;
    $freq[$_] += $row[2+$_] for (0..3);
  }
  return @freq;
}

#......................................................................................

sub denovo_assemble {
  my($reads, $ctgs) = @_;
  msg("De novo assembling $ctgs");
  my $cmd = $asmcmd;
  $cmd =~ s/{R1}/$reads/;
  $cmd =~ s/{CTGS}/$ctgs/;
  $cmd =~ s/{CPUS}/$opt{j}/;
  run_cmd($cmd);
}

#......................................................................................

sub run_cmd {
  my($cmd) = @_;
  my $redir = $cmd =~ m/\s>/ ? '' : '2>&1';
  $cmd = "($cmd) $redir | tee -a '$LOGFILE'" if $LOGFILE;
  msg("Running:", $cmd);
  system($cmd)==0 or err("Error $? running command: $!");
  return;
}

#......................................................................................

sub need_exe {
  my(@exe) = @_;
  for my $exe (@exe) {
    my($path) = qx"which $exe 2> /dev/null";
    chomp $path;
    $path and -x $path ? msg("Using '$exe' - $path")
                       : err("Could not find '$exe' - please install it.");
  }
}

#......................................................................................


